#!/usr/bin/env node

const Promise = require("bluebird");
const argv = require("yargs").argv;
const mysql = Promise.promisifyAll(require("mysql"));
const Writable = require('stream').Writable;
const readline = require("readline");
const bcrypt = require("bcryptjs");

const mutableStdout = new Writable({
  write: function(chunk, encoding, callback) {
    if (!this.muted)
      process.stdout.write(chunk, encoding);
    callback();
  }
});

mutableStdout.muted = false;

const rl = readline.createInterface({
    input: process.stdin,
    output: mutableStdout,
    terminal: true
});

rl.questionAsync = function(question) {
    return new Promise(resolve => {
        this.question(question, resolve);
    });
};

rl.mutedQuestionAsync = function(question) {
    return new Promise(resolve => {
        this.question(question, resolve);
        mutableStdout.muted = true;
    }).finally(() => {mutableStdout.muted = false});
};

const mySqlOptions = {
    host: process.env.SOITA_MYSQL_HOST,
    port: process.env.SOITA_MYSQL_PORT,
    user: process.env.SOITA_MYSQL_USER,
    password: process.env.SOITA_MYSQL_PASSWORD,
    database: process.env.SOITA_MYSQL_DATABASE,
    charset: "utf8mb4",
    timezone: "Z",
    connectTimeout: 30 * 1000,
    trace: false
};

const connection = Promise.promisifyAll(mysql.createConnection(mySqlOptions));
const rAccountName = /^[a-zA-Z0-9_-]+$/
const rPassword = /^[\u0020-\u007f]+$/

function getAccountName() {
    return rl.questionAsync("Enter account name:\n").then(accountName => {
        accountName = ("" + accountName).trim();
        if (accountName.length > 16) {
            console.error("Account name cannot be longer than 16 characters.");
            return getUserName();
        } else if (accountName.length < 4) {
            console.error("Account name must be at least 4 characters long.");
            return getUserName();
        } else if (!rAccountName.test(accountName)) {
            console.error("Account name must match /^[a-zA-Z0-9_-]+$/");
            return getUserName();
        }

        return connection.queryAsync("SELECT * FROM account WHERE name=?", accountName).then(results => {
            if (results.length > 0) {
                console.error("Account by this name already exists.");
                return getUserName();
            }
            return accountName;
        })
    })
}

function getPlainTextPassword() {
    return rl.mutedQuestionAsync("Enter password:\n").then(plainTextPassword => {
        plainTextPassword = "" + plainTextPassword;
        if (plainTextPassword.length < 8) {
            console.error("Password must be at least 8 characters long.");
            return getPlainTextPassword();
        } else if (plainTextPassword.length > 72) {
            console.error("Password cannot be longer than 72 characters.");
            return getPlainTextPassword();
        } else if (!rPassword.test(plainTextPassword)) {
            console.error("Password must contain ASCII characters only.");
            return getPlainTextPassword();
        }
        return rl.mutedQuestionAsync("Enter password again:\n").then(plainTextPasswordAgain => {
            if (plainTextPasswordAgain !== plainTextPassword) {
                console.error("Passwords didn't match.");
                return getPlainTextPassword();
            } else {
                return plainTextPasswordAgain;
            }
        })
    });
}


console.log("Connecting to database.");
connection.connectAsync().then(() => {
    console.log("Connected to database.");

    getAccountName().then(accountName => getPlainTextPassword().then(plainTextPassword => {
        console.log("Password ok.");
        var salt = bcrypt.genSaltSync(16);
        var hash = bcrypt.hashSync(plainTextPassword, salt);
        return connection.queryAsync("INSERT INTO account (name, salt, hash) VALUES(?, ?, ?)", [accountName, salt, hash]).then(results => {
            console.log("Account", accountName, "created with id", results.insertId);
            process.exit(0);
        });
    })).catch(function(e) {
        console.error("Unable to create account: " + e);
        process.exit(1);
    });
    return null;
}).catch(function(e) {
    console.error("Unable to connect to database: " + e);
    console.error("Make sure environment variables are set correctly.");
    process.exit(2);
});
